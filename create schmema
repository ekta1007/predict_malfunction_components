use ASUS;

drop table if exists sale_train;
create table sale_train
(module_category	VARCHAR(300),
component_category	 VARCHAR(300) ,
year_month_custom VARCHAR(300),	number_sale INT ) ;

LOAD DATA LOCAL INFILE 
'D:\\Desktop\\Asus\\SaleTrain.csv'
INTO TABLE sale_train 
FIELDS TERMINATED BY ',' 
LINES TERMINATED BY '\n'  ignore 1 lines
(module_category , component_category , year_month_custom,	number_sale ) ;

#check
select * from sale_train
limit 10 ;

drop table if exists repair_train;
create table repair_train
(module_category	VARCHAR(300),
component_category	 VARCHAR(300) ,
year_month_custom_sale VARCHAR(300), year_month_custom_repair VARCHAR(300) ,	number_repair INT ) ;

LOAD DATA LOCAL INFILE 
'D:\\Desktop\\Asus\\RepairTrain.csv'
INTO TABLE  repair_train 
FIELDS TERMINATED BY ',' 
LINES TERMINATED BY '\n'  ignore 1 lines
(module_category, component_category,
year_month_custom_sale , year_month_custom_repair  ,	number_repair) ;

#check
select * from  repair_train 
limit 10;


drop table if exists Output_TargetID_Mapping;
create table Output_TargetID_Mapping
(module_category VARCHAR(300),	component_category	VARCHAR(300), year_custom VARCHAR(300),	month_custom  SMALLINT);


LOAD DATA LOCAL INFILE 
'D:\\Desktop\\Asus\\Output_TargetID_Mapping.csv'
INTO TABLE  Output_TargetID_Mapping 
FIELDS TERMINATED BY ',' 
LINES TERMINATED BY '\n'  ignore 1 lines
(module_category ,	component_category	, year_custom ,	month_custom ) ;

#check
select * from  Output_TargetID_Mapping
limit 10;


#DERIVED COLUMNS - SALE TABLE

alter table sale_train
add column year_custom int;

alter table sale_train
add column month_custom int;


#DERIVED columns - REPAIR table

alter table repair_train
add column year_sale int;

alter table repair_train
add column month_sale int;

alter table repair_train
add column year_repair int;

alter table repair_train
add column month_repair int;

USE ASUS;

alter table sale_train
add column id_custom int auto_increment primary key ;

alter table repair_train
add column id_custom int auto_increment primary key ;

create index index1 on sale_train(id_custom);
create index index1 on repair_train(id_custom);

UPDATE sale_train t1, sale_train t2 
SET t1.year_custom = SUBSTRING_INDEX(t2.year_month_custom,'/',1)
WHERE t1.id_custom=t2.id_custom ;

UPDATE sale_train t1, sale_train t2 
SET t1.month_custom = SUBSTRING_INDEX(t2.year_month_custom,'/',-1)
WHERE t1.id_custom=t2.id_custom ;

UPDATE repair_train t1, repair_train t2 
SET t1.year_sale = SUBSTRING_INDEX(t2.year_month_custom_sale,'/',1)
WHERE t1.id_custom=t2.id_custom ;

UPDATE repair_train t1, repair_train t2 
SET t1.month_sale = SUBSTRING_INDEX(t2.year_month_custom_sale,'/',-1)
WHERE t1.id_custom=t2.id_custom ;

UPDATE repair_train t1, repair_train t2 
SET t1.year_repair = SUBSTRING_INDEX(t2.year_month_custom_repair,'/',1)
WHERE t1.id_custom=t2.id_custom ;

UPDATE repair_train t1, repair_train t2 
SET t1.month_repair = SUBSTRING_INDEX(t2.year_month_custom_repair,'/',-1)
WHERE t1.id_custom=t2.id_custom ;


#converting string keys using SHA hash map function - see also here
#http://greenash.net.au/thoughts/2010/03/generating-unique-integer-ids-from-strings-in-mysql/
alter table sale_train
add column id_unique BIGINT UNSIGNED NOT NULL FIRST;
alter table repair_train
add column id_unique BIGINT UNSIGNED NOT NULL FIRST;


update sale_train  set id_unique =CONV(SUBSTRING(CAST(SHA(Concat(module_category,component_category)) AS CHAR), 1, 16), 16, 10) ;
update repair_train  set id_unique =CONV(SUBSTRING(CAST(SHA(Concat(module_category,component_category)) AS CHAR), 1, 16), 16, 10) ;

create index index5 on sale_train(id_unique);
create index index5 on repair_train(id_unique);


alter table repair_train
add column time_to_repair_months int;

update repair_train  set time_to_repair_months =(year_repair-year_sale)*12+(month_repair-month_sale)  ;



# analysis & joining etc for modelling 
drop table if exists temp_survival ;
create table temp_survival
select a.id_unique, a.year_month_custom as sale_date, sum(a.number_sale) as total_sales_for_this_date from sale_train a
group by id_unique, sale_date ;
# for cross verification


drop table if exists survival;
create table survival
select a.id_unique, a.year_month_custom as sale_date, b.year_month_custom_repair as repair_date, b.number_repair , sum(a.number_sale) as total_sales_for_this_date from sale_train a
inner join repair_train b
where a.id_unique=b.id_unique and a.year_month_custom = b.year_month_custom_sale
group by id_unique, sale_date, repair_date;

